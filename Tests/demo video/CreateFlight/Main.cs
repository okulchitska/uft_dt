/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘CreateFlight.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir31 = null;
        public BindDirection bind_dir32 = null;
        public BindDirection bind_dir33 = null;
        public BindDirection bind_dir34 = null;
        public HP.ST.Ext.BasicActivities.DataCursorActivity DataCursorActivity24 = null;
        public BindDirection bind_dir35 = null;
        public HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy DataCursorActivity24_Policy = null;
        public BindDirection bind_dir36 = null;
        public BindDirection bind_dir37 = null;
        public BindDirection bind_dir38 = null;
        public BindDirection bind_dir39 = null;
        public BindDirection bind_dir40 = null;
        public BindDirection bind_dir41 = null;
        public BindDirection bind_dir42 = null;
        public BindDirection bind_dir43 = null;
        public BindDirection bind_dir44 = null;
        public BindDirection bind_dir45 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        FeaturesGroup fg1 = new FeaturesGroup();
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.0"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.1"));
            fg1.Add(new LicenseFeature("UnifiedFunctionalTesting","1.2"));
            features.Add(fg1);
            return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity20 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity20");
            _flow.DataFetchActivity17 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity17");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity19 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity19");
            _flow.DataExporterActivity22 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity22");
            _flow.DataExporterCloseActivity23 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity23");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity18 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity18");
            _flow.DataDisconnectActivity21 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity21");
            this.DataCursorActivity24 = new HP.ST.Ext.BasicActivities.DataCursorActivity(_context,"DataCursorActivity24");
            this.DataCursorActivity24_Policy = new HP.ST.Fwk.SOAReplayAPI.DataHandling.CursorMovementPolicy();
            _flow.Sequence16 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence16");
            _flow.StServiceCallActivity9 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity9");
            _flow.StServiceCallActivity11 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity11");
            _flow.CallQTPTest12 = new HP.ST.Ext.UFTActivity.QtpTestActivity(_context,"CallQTPTest12");
            _flow.DataFetchActivity20.Comment = @"";
            _flow.DataFetchActivity20.IconPath = @"";
            _flow.DataFetchActivity20.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity20.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity20_QueryParameters_Document = new XmlDocument();
            DataFetchActivity20_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity20Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>1111aa30-5e61-445a-8ed9-7b94bf89de7f</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>FlidhtInfo!Output</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>FlidhtInfo</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{FlidhtInfo!Output.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Output$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity20_QueryParameters_Document.LoadXml(xmlDataFetchActivity20Params);
            _flow.DataFetchActivity20.QueryParameters = DataFetchActivity20_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("FlidhtInfo!Output", _flow.DataFetchActivity20);
            this.Activities.Add (_flow.DataFetchActivity20);
            _flow.DataFetchActivity17.Comment = @"";
            _flow.DataFetchActivity17.IconPath = @"";
            _flow.DataFetchActivity17.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity17.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity17_QueryParameters_Document = new XmlDocument();
            DataFetchActivity17_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity17Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>32df716a-737c-40c1-a74a-53537eb3c9ac</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>FlidhtInfo!Input</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>FlidhtInfo</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{FlidhtInfo!Input.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Input$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity17_QueryParameters_Document.LoadXml(xmlDataFetchActivity17Params);
            _flow.DataFetchActivity17.QueryParameters = DataFetchActivity17_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("FlidhtInfo!Input", _flow.DataFetchActivity17);
            this.Activities.Add (_flow.DataFetchActivity17);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            this.Activities.Add (_flow.StartActivity1);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            _flow.Loop2.Activities.Add (this.DataCursorActivity24);
            _flow.Loop2.Activities.Add (_flow.Sequence16);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity19.Comment = @"";
            _flow.DataExporterActivity19.IconPath = @"";
            VTDPropertyInfoBase pi61 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter31 = new VTDObjectGetter(pi61);
            VTDPropertyInfoBase pi62 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter31 = new VTDObjectSetter(pi62);
            binding_setter31 = new StringFormaterDecorator(binding_setter31,"{Step.DataFetchActivity17.OutTable}");
            bind_dir31 = new BindDirection(_flow.DataFetchActivity17,binding_getter31,binding_setter31,BindTargetType.ToInProperty);
            _flow.DataExporterActivity19.InDirections.Add(bind_dir31);
            this.Activities.Add (_flow.DataExporterActivity19);
            _flow.DataExporterActivity22.Comment = @"";
            _flow.DataExporterActivity22.IconPath = @"";
            VTDPropertyInfoBase pi63 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter32 = new VTDObjectGetter(pi63);
            VTDPropertyInfoBase pi64 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter32 = new VTDObjectSetter(pi64);
            binding_setter32 = new StringFormaterDecorator(binding_setter32,"{Step.DataFetchActivity20.OutTable}");
            bind_dir32 = new BindDirection(_flow.DataFetchActivity20,binding_getter32,binding_setter32,BindTargetType.ToInProperty);
            _flow.DataExporterActivity22.InDirections.Add(bind_dir32);
            this.Activities.Add (_flow.DataExporterActivity22);
            _flow.DataExporterCloseActivity23.Comment = @"";
            _flow.DataExporterCloseActivity23.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity23);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity18.Comment = @"";
            _flow.DataDisconnectActivity18.IconPath = @"";
            VTDPropertyInfoBase pi65 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter33 = new VTDObjectGetter(pi65);
            VTDPropertyInfoBase pi66 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter33 = new VTDObjectSetter(pi66);
            binding_setter33 = new StringFormaterDecorator(binding_setter33,"{Step.DataFetchActivity17.OutTable}");
            bind_dir33 = new BindDirection(_flow.DataFetchActivity17,binding_getter33,binding_setter33,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity18.InDirections.Add(bind_dir33);
            this.Activities.Add (_flow.DataDisconnectActivity18);
            _flow.DataDisconnectActivity21.Comment = @"";
            _flow.DataDisconnectActivity21.IconPath = @"";
            VTDPropertyInfoBase pi67 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter34 = new VTDObjectGetter(pi67);
            VTDPropertyInfoBase pi68 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter34 = new VTDObjectSetter(pi68);
            binding_setter34 = new StringFormaterDecorator(binding_setter34,"{Step.DataFetchActivity20.OutTable}");
            bind_dir34 = new BindDirection(_flow.DataFetchActivity20,binding_getter34,binding_setter34,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity21.InDirections.Add(bind_dir34);
            this.Activities.Add (_flow.DataDisconnectActivity21);
            this.DataCursorActivity24.Comment = @"";
            this.DataCursorActivity24.IconPath = @"";
            VTDPropertyInfoBase pi69 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter35 = new VTDObjectGetter(pi69);
            VTDPropertyInfoBase pi70 = new VTDPropertyInfoBase("InTable");
            VTDBaseSetter binding_setter35 = new VTDObjectSetter(pi70);
            binding_setter35 = new StringFormaterDecorator(binding_setter35,"{Step.DataFetchActivity17.OutTable}");
            bind_dir35 = new BindDirection(_flow.DataFetchActivity17,binding_getter35,binding_setter35,BindTargetType.ToInProperty);
            this.DataCursorActivity24.InDirections.Add(bind_dir35);
            this.DataCursorActivity24_Policy.StartPosition = CursorStartPosition.FirstRecord;
            this.DataCursorActivity24_Policy.StartAtSpecificRow = 1;
            this.DataCursorActivity24_Policy.StartCondition.ColumnName = "";
            this.DataCursorActivity24_Policy.StartCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity24_Policy.StartCondition.Value = "";
            this.DataCursorActivity24_Policy.EndPosition = CursorEndPosition.LastRecord;
            this.DataCursorActivity24_Policy.EndAtSpecificRow = 1;
            this.DataCursorActivity24_Policy.EndCondition.ColumnName = "";
            this.DataCursorActivity24_Policy.EndCondition.Comparison = ConditionOperator.Equal;
            this.DataCursorActivity24_Policy.EndCondition.Value = "";
            this.DataCursorActivity24_Policy.StepType = CursorStepType.Forward;
            this.DataCursorActivity24_Policy.StepSize = 1;
            this.DataCursorActivity24_Policy.ActionAfterLastRecord = CursorActionAfterLastRecord.Wraparound;
            this.DataCursorActivity24.Policy = this.DataCursorActivity24_Policy;
            this.DataCursorActivity24.ReportStepData = true;
            _flow.Loop2.BeforeExecuteStepEvent += this.DataCursorActivity24.ResetCursor;
            _flow.Sequence16.Comment = @"";
            _flow.Sequence16.IconPath = @"";
            _flow.Sequence16.Name = @"Sequence16";
            _flow.Sequence16.Activities.Add (_flow.StServiceCallActivity9);
            _flow.Sequence16.Activities.Add (_flow.StServiceCallActivity11);
            _flow.Sequence16.Activities.Add (_flow.CallQTPTest12);
            XmlDocument StServiceCallActivity9_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity9_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity9_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp""><DepartureCity>{DataSource.FlidhtInfo!Input.DepartureCity}</DepartureCity><ArrivalCity>{DataSource.FlidhtInfo!Input.ArrivalCity}</ArrivalCity><FlightDate>{DataSource.FlidhtInfo!Input.DepartureDate}</FlightDate></GetFlights></Body></Envelope>");
            _flow.StServiceCallActivity9.InputEnvelope = StServiceCallActivity9_InputEnvelope_Document;
            _flow.StServiceCallActivity9.Comment = @"";
            _flow.StServiceCallActivity9.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity9.Name = @"GetFlights";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity9.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity9.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity9.Service = @"Flights_Service";
            _flow.StServiceCallActivity9.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity9.Operation = @"GetFlights";
            _flow.StServiceCallActivity9.IsOneWay = false;
            _flow.StServiceCallActivity9.SendRequestToService=true;
            _flow.StServiceCallActivity9.FaultExpected=false;
            _flow.StServiceCallActivity9.IsAsync=false;
            _flow.StServiceCallActivity9.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity9.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi71 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter36 = new VTDObjectGetter(pi71);
            VTDPropertyInfoBase pi72 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseSetter binding_setter36 = new VTDXPathSetter(pi72,XmlTypeCode.DateTime);
            bind_dir36 = new BindDirection(this.DataCursorActivity24,binding_getter36,binding_setter36,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir36);
            VTDPropertyInfoBase pi73 = new VTDPropertyInfoBase("DepartureCity");
            VTDBaseGetter binding_getter37 = new VTDObjectGetter(pi73);
            VTDPropertyInfoBase pi74 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='DepartureCity'][1]");
            VTDBaseSetter binding_setter37 = new VTDXPathSetter(pi74,XmlTypeCode.String);
            binding_setter37 = new StringFormaterDecorator(binding_setter37,"{DataSource.FlidhtInfo!Input.DepartureCity}");
            bind_dir37 = new BindDirection(this.DataCursorActivity24,binding_getter37,binding_setter37,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir37);
            VTDPropertyInfoBase pi75 = new VTDPropertyInfoBase("ArrivalCity");
            VTDBaseGetter binding_getter38 = new VTDObjectGetter(pi75);
            VTDPropertyInfoBase pi76 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='ArrivalCity'][1]");
            VTDBaseSetter binding_setter38 = new VTDXPathSetter(pi76,XmlTypeCode.String);
            binding_setter38 = new StringFormaterDecorator(binding_setter38,"{DataSource.FlidhtInfo!Input.ArrivalCity}");
            bind_dir38 = new BindDirection(this.DataCursorActivity24,binding_getter38,binding_setter38,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity9.InDirections.Add(bind_dir38);
            XmlDocument StServiceCallActivity9_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity9.ExpectedOutputAttachments = StServiceCallActivity9_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity9_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity9.ExpectedFaultProperties = StServiceCallActivity9_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity9_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity9_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity9_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightsResult><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity p1:nil=""true"" /><DepartureTime p1:nil=""true"" /><FlightNumber /></Flight></GetFlightsResult></GetFlightsResponse></Body></Envelope>");
            _flow.StServiceCallActivity9.ExpectedOutputProperties = StServiceCallActivity9_ExpectedOutputProperties_Document;
            set_StServiceCallActivity9_checkpoints(_flow.StServiceCallActivity9);
            XmlDocument StServiceCallActivity11_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity11_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity11_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>{DataSource.FlidhtInfo!Input.Class}</Class><CustomerName>{DataSource.FlidhtInfo!Input.CustomerName}</CustomerName><DepartureDate>{DataSource.FlidhtInfo!Input.DepartureDate}</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity9.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>{DataSource.FlidhtInfo!Input.NumberOfTickets}</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity11.InputEnvelope = StServiceCallActivity11_InputEnvelope_Document;
            _flow.StServiceCallActivity11.Comment = @"";
            _flow.StServiceCallActivity11.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity11.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity11.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity11.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity11.Service = @"Flights_Service";
            _flow.StServiceCallActivity11.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity11.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity11.IsOneWay = false;
            _flow.StServiceCallActivity11.SendRequestToService=true;
            _flow.StServiceCallActivity11.FaultExpected=false;
            _flow.StServiceCallActivity11.IsAsync=false;
            _flow.StServiceCallActivity11.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity11.ListenOnPort = (int)0;
            VTDPropertyInfoBase pi77 = new VTDPropertyInfoBase("NumberOfTickets");
            VTDBaseGetter binding_getter39 = new VTDObjectGetter(pi77);
            VTDPropertyInfoBase pi78 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='NumberOfTickets'][1]");
            VTDBaseSetter binding_setter39 = new VTDXPathSetter(pi78,XmlTypeCode.Int);
            bind_dir39 = new BindDirection(this.DataCursorActivity24,binding_getter39,binding_setter39,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir39);
            VTDPropertyInfoBase pi79 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter40 = new VTDXPathGetter(pi79,XmlTypeCode.Int);
            binding_getter40 = new XPathGetterDecorator(binding_getter40,"{Array0}",1);
            VTDPropertyInfoBase pi80 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter40 = new VTDXPathSetter(pi80,XmlTypeCode.Int);
            bind_dir40 = new BindDirection(_flow.StServiceCallActivity9,binding_getter40,binding_setter40,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir40);
            VTDPropertyInfoBase pi81 = new VTDPropertyInfoBase("DepartureDate");
            VTDBaseGetter binding_getter41 = new VTDObjectGetter(pi81);
            VTDPropertyInfoBase pi82 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter41 = new VTDXPathSetter(pi82,XmlTypeCode.DateTime);
            bind_dir41 = new BindDirection(this.DataCursorActivity24,binding_getter41,binding_setter41,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir41);
            VTDPropertyInfoBase pi83 = new VTDPropertyInfoBase("CustomerName");
            VTDBaseGetter binding_getter42 = new VTDObjectGetter(pi83);
            VTDPropertyInfoBase pi84 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseSetter binding_setter42 = new VTDXPathSetter(pi84,XmlTypeCode.String);
            binding_setter42 = new StringFormaterDecorator(binding_setter42,"{DataSource.FlidhtInfo!Input.CustomerName}");
            bind_dir42 = new BindDirection(this.DataCursorActivity24,binding_getter42,binding_setter42,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir42);
            VTDPropertyInfoBase pi85 = new VTDPropertyInfoBase("Class");
            VTDBaseGetter binding_getter43 = new VTDObjectGetter(pi85);
            VTDPropertyInfoBase pi86 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='Class'][1]");
            VTDBaseSetter binding_setter43 = new VTDXPathSetter(pi86,XmlTypeCode.String);
            binding_setter43 = new StringFormaterDecorator(binding_setter43,"{DataSource.FlidhtInfo!Input.Class}");
            bind_dir43 = new BindDirection(this.DataCursorActivity24,binding_getter43,binding_setter43,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity11.InDirections.Add(bind_dir43);
            XmlDocument StServiceCallActivity11_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity11.ExpectedOutputAttachments = StServiceCallActivity11_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity11_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity11.ExpectedFaultProperties = StServiceCallActivity11_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity11_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity11_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity11_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp""><CreateFlightOrderResult><OrderNumber /></CreateFlightOrderResult></CreateFlightOrderResponse></Body></Envelope>");
            _flow.StServiceCallActivity11.ExpectedOutputProperties = StServiceCallActivity11_ExpectedOutputProperties_Document;
            XmlDocument CallQTPTest12_InputArguments_Document = new XmlDocument();
            CallQTPTest12_InputArguments_Document.PreserveWhitespace = true;
            CallQTPTest12_InputArguments_Document.LoadXml(
@"<Arguments><tOrderNumber>{Step.OutputProperties.StServiceCallActivity11.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}</tOrderNumber><tPassengerName>{Step.InputProperties.StServiceCallActivity11.Body.CreateFlightOrder.FlightOrder.CustomerName}</tPassengerName></Arguments>");
            _flow.CallQTPTest12.InputArguments = CallQTPTest12_InputArguments_Document;
            _flow.CallQTPTest12.Comment = @"";
            _flow.CallQTPTest12.IconPath = @"AddIns\ServiceTest\UFT\toolbox_qtp.png";
            _flow.CallQTPTest12.Name = @"SearchOrderByID";
            _flow.CallQTPTest12.ScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.ScriptPath}")) ? @"[QC-TEST];;Subject\demo video\SearchOrderByID;;" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.ScriptPath}");
            _flow.CallQTPTest12.ActionName = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.ActionName}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.ActionName}");
            _flow.CallQTPTest12.Description = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.Description}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.Description}");
            _flow.CallQTPTest12.IsActionSelected = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.IsActionSelected}")) ? @"True" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.IsActionSelected}");
            _flow.CallQTPTest12.ResultLocation = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.ResultLocation}")) ? @"RunQTPReport\" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.ResultLocation}");
            _flow.CallQTPTest12.QCScriptPath = String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.QCScriptPath}")) ? @"" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.CallQTPTest12.QCScriptPath}");
            VTDPropertyInfoBase pi87 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='CustomerName'][1]");
            VTDBaseGetter binding_getter44 = new VTDXPathGetter(pi87,XmlTypeCode.String);
            VTDPropertyInfoBase pi88 = new VTDPropertyInfoBase("InputArguments","/*[local-name(.)='Arguments'][1]/*[local-name(.)='tPassengerName'][1]");
            VTDBaseSetter binding_setter44 = new VTDXPathSetter(pi88,XmlTypeCode.String);
            binding_setter44 = new StringFormaterDecorator(binding_setter44,"{Step.InputProperties.StServiceCallActivity11.Body.CreateFlightOrder.FlightOrder.CustomerName}");
            bind_dir44 = new BindDirection(_flow.StServiceCallActivity11,binding_getter44,binding_setter44,BindTargetType.ToInProperty);
            _flow.CallQTPTest12.InDirections.Add(bind_dir44);
            VTDPropertyInfoBase pi89 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrderResponse'][1]/*[local-name(.)='CreateFlightOrderResult'][1]/*[local-name(.)='OrderNumber'][1]");
            VTDBaseGetter binding_getter45 = new VTDXPathGetter(pi89,XmlTypeCode.Int);
            VTDPropertyInfoBase pi90 = new VTDPropertyInfoBase("InputArguments","/*[local-name(.)='Arguments'][1]/*[local-name(.)='tOrderNumber'][1]");
            VTDBaseSetter binding_setter45 = new VTDXPathSetter(pi90,XmlTypeCode.String);
            binding_setter45 = new StringFormaterDecorator(binding_setter45,"{Step.OutputProperties.StServiceCallActivity11.Body.CreateFlightOrderResponse.CreateFlightOrderResult.OrderNumber}");
            bind_dir45 = new BindDirection(_flow.StServiceCallActivity11,binding_getter45,binding_setter45,BindTargetType.ToInProperty);
            _flow.CallQTPTest12.InDirections.Add(bind_dir45);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(),@"bin\ReportResources");                
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    